ggtitle("Top 10 End Stations Across All Cities") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
top_stations <- merged_df %>%
group_by(City, End.Station, .groups = "drop") %>%
summarize(Count = n()) %>%
arrange(City, desc(Count)) %>%
group_by(City) %>%
top_n(10, wt = Count)
# Get unique City names
unique_cities <- unique(top_stations$City)
# Create a list of colors based on the number of unique cities
colors <- scales::hue_pal()(length(unique_cities))
# Create a bar plot with dynamically generated colors
ggplot(top_stations, aes(x = reorder(End.Station, -Count), y = Count, fill = City)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "End Station", y = "Count") +
ggtitle("Top 10 End Stations by City") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = setNames(colors, unique_cities))
top_stations <- merged_df %>%
group_by(End.Station) %>%
summarize(Count = n()) %>%
arrange(desc(Count)) %>%
top_n(10, wt = Count)
# Get unique City names
unique_cities <- unique(top_stations$City)
# Create a list of colors based on the number of unique cities
colors <- scales::hue_pal()(length(unique_cities))
top_stations <- merged_df %>%
group_by(End.Station) %>%
summarize(Count = n()) %>%
arrange(desc(Count)) %>%
top_n(10, wt = Count)
# Create a bar plot
ggplot(top_stations, aes(x = reorder(End.Station, -Count), y = Count)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(x = "End Station", y = "Count") +
ggtitle("Top 10 End Stations Across All Cities") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
top_stations <- merged_df %>%
group_by(City, End.Station) %>%
summarize(Count = n()) %>%
arrange(City, desc(Count)) %>%
group_by(City) %>%
top_n(10, wt = Count)
# Create a bar plot with bars colored by City and a legend
ggplot(top_stations, aes(x = reorder(End.Station, -Count), y = Count, fill = City)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "End Station", y = "Count") +
ggtitle("Top 10 End Stations Across All Cities") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = c("City A" = "skyblue", "City B" = "salmon")) +
guides(fill = guide_legend(title = "City"))
top_stations <- merged_df %>%
group_by(City, End.Station) %>%
summarize(Count = n()) %>%
arrange(City, desc(Count)) %>%
group_by(City) %>%
top_n(10, wt = Count)
# Create a bar plot with bars colored by City and a legend
ggplot(top_stations, aes(x = reorder(End.Station, -Count), y = Count, fill = City)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "End Station", y = "Count") +
ggtitle("Top 10 End Stations Across All Cities") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = c("NY" = "skyblue", "Washington" = "salmon", "Chicago" = "chartreuse")) +
guides(fill = guide_legend(title = "City"))
install.packages("dplyr","summarytools","ggplot2")
library(dplyr, summarytools, ggplot2)
install.packages("dplyr","summarytools","ggplot2")
library(dplyr, summarytools, ggplot2)
library(ggplot2)
library(dbplyr)
library(summarytools)
install.packages("dplyr","summarytools","ggplot2")
library(dplyr, summarytools, ggplot2)
install.packages("dplyr", "summarytools", "ggplot2")
install.packages("dplyr", "summarytools", "ggplot2")
library(dbplyr)
library(ggplot2)
library(dplyr)
library(summarytools)
install.packages("dplyr","summarytools","ggplot2")
library(dplyr, summarytools, ggplot2)
install.packages("dplyr", "summarytools", "ggplot2")
ny = read.csv("new-york-city.csv")
wash = read.csv("washington.csv")
chi = read.csv("chicago.csv")
install.packages("dplyr","summarytools","ggplot2")
library(dplyr, summarytools, ggplot2)
ny = read.csv("new-york-city.csv")
wash = read.csv("washington.csv")
chi = read.csv("chicago.csv")
install.packages("dplyr", "summarytools", "ggplot2")
colnames(ny)
colnames(wash)
str(ny)
wash$Gender <- NA
wash$Birth.Year <-NA
formatDateTimeColumn <- function(df, col_name) {
# Check if the specified column exists in the dataframe
if (!col_name %in% colnames(df)) {
stop("Column not found in the dataframe.")
}
# Convert the specified column to POSIXct
df[[col_name]] <- as.POSIXct(df[[col_name]], format = "%Y-%m-%d %H:%M:%S")
# Format the column using strftime()
df[[col_name]] <- strftime(df[[col_name]], format = "%Y-%m-%d %H:%M:%S")
return(df)
}
ny <- formatDateTimeColumn(ny, "Start.Time")
wash <- formatDateTimeColumn(wash, "Start.Time")
chi <- formatDateTimeColumn(chi, "Start.Time")
ny <- formatDateTimeColumn(ny, "End.Time")
wash <- formatDateTimeColumn(wash, "End.Time")
chi <- formatDateTimeColumn(chi, "End.Time")
ny$City <- "NY"
wash$City <- "Washington"
chi$City <- "Chicago"
merged_df <-rbind(ny,wash)
merged_df <- rbind(merged_df,chi)
head(merged_df)
# Use the table() function to count the occurrences of each end station
end_station_counts <- table(merged_df$End.Station)
# Sort the counts in descending order
sorted_counts <- sort(end_station_counts, decreasing = TRUE)
# Get the top 10 most common end stations
top_10_end_stations <- head(sorted_counts, 10)
# Print the result
print(top_10_end_stations)
station_data <-as.data.frame(top_10_end_stations)
colnames(station_data) <- c("End_Station","Count")
# Show the results
ggplot(station_data, aes(x = reorder(End_Station, -Count), y = Count)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(x = "End Station", y = "Count") +
ggtitle("Top 10 End Stations") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
top_stations <- merged_df %>%
group_by(City, End.Station) %>%
summarize(Count = n()) %>%
arrange(City, desc(Count)) %>%
group_by(City) %>%
top_n(10, wt = Count)
# Create a bar plot with bars colored by City and a legend
ggplot(top_stations, aes(x = reorder(End.Station, -Count), y = Count, fill = City)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "End Station", y = "Count") +
ggtitle("Top 10 End Stations Across All Cities") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = c("NY" = "skyblue", "Washington" = "salmon", "Chicago" = "chartreuse")) +
guides(fill = guide_legend(title = "City"))
library(lubridate)
# Extract the month from the 'Start.Time' column
merged_df$Start.Month <- month(merged_df$Start.Time)
# Calculate the mode (most common) month
mode_month <- as.integer(names(sort(table(merged_df$Start.Month), decreasing = TRUE)[1]))
# Convert the mode_month to a month name
mode_month_name <- month.name[mode_month]
# Print the result
cat("The most common month is:", mode_month_name, "\n")
# Extract the month from the 'Start.Time' column
merged_df$Start.Month <- month(merged_df$Start.Time)
# Create separate dataframes for each city
ny_data <- merged_df %>% filter(City == "NY")
wash_data <- merged_df %>% filter(City == "Washington")
chi_data <- merged_df %>% filter(City == "Chicago")
# Create plots for each city
ny_data <- ggplot(ny_data, aes(x = Start.Month)) +
geom_bar() +
labs(title = "City A - Rides per Month", x = "Month", y = "Count")
wash_data <- ggplot(wash_data, aes(x = Start.Month)) +
geom_bar() +
labs(title = "City B - Rides per Month", x = "Month", y = "Count")
chi_data <- ggplot(chi_data, aes(x = Start.Month)) +
geom_bar() +
labs(title = "City C - Rides per Month", x = "Month", y = "Count")
# Print the plots
print(ny_data)
print(wash_data)
print(chi_data)
# Load the necessary library (if not already loaded)
# install.packages("dplyr") # Uncomment this line if you haven't installed dplyr
library(dplyr)
# Assuming your dataframe is named 'merged_df'
# Group the data by Start.Station and End.Station, then count the occurrences
trip_counts <- merged_df %>%
group_by(Start.Station, End.Station) %>%
summarize(Count = n())
# Find the most common trip by arranging the data in descending order of Count
most_common_trip <- trip_counts %>%
arrange(desc(Count)) %>%
slice(1)
# Print the result
cat("The most common trip is from", most_common_trip$Start.Station,
"to", most_common_trip$End.Station, "with a count of", most_common_trip$Count, "\n")
# Load the necessary library (if not already loaded)
# install.packages("dplyr") # Uncomment this line if you haven't installed dplyr
library(dplyr)
# Assuming your dataframe is named 'merged_df'
# Remove missing or invalid birth years (if any)
merged_df <- merged_df %>%
filter(!is.na(Birth.Year) & Birth.Year >= 1900)
# Find the earliest birth year
earliest_birth_year <- min(merged_df$Birth.Year)
# Find the most recent birth year
most_recent_birth_year <- max(merged_df$Birth.Year)
# Find the most common birth year
most_common_birth_year <- merged_df %>%
group_by(Birth.Year) %>%
summarize(Count = n()) %>%
arrange(desc(Count)) %>%
slice(1) %>%
pull(Birth.Year)
# Print the results
cat("Earliest birth year:", earliest_birth_year, "\n")
cat("Most recent birth year:", most_recent_birth_year, "\n")
cat("Most common birth year:", most_common_birth_year, "\n")
# Use the table() function to count the occurrences of each end station
end_station_counts <- table(merged_df$End.Station)
# Sort the counts in descending order
sorted_counts <- sort(end_station_counts, decreasing = TRUE)
# Get the top 10 most common end stations
top_10_end_stations <- head(sorted_counts, 10)
# Print the result
print(top_10_end_stations)
station_data <-as.data.frame(top_10_end_stations)
colnames(station_data) <- c("End_Station","Count")
# Show the results
ggplot(station_data, aes(x = reorder(End_Station, -Count), y = Count)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(x = "End Station", y = "Count") +
ggtitle("Top 10 End Stations") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
top_stations <- merged_df %>%
group_by(City, End.Station) %>%
summarize(Count = n()) %>%
arrange(City, desc(Count)) %>%
group_by(City) %>%
top_n(10, wt = Count)
# Create a bar plot with bars colored by City and a legend
ggplot(top_stations, aes(x = reorder(End.Station, -Count), y = Count, fill = City)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "End Station", y = "Count") +
ggtitle("Top 10 End Stations Across All Cities") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = c("NY" = "skyblue", "Washington" = "salmon", "Chicago" = "chartreuse")) +
guides(fill = guide_legend(title = "City"))
# Use the table() function to count the occurrences of each end station
end_station_counts <- table(merged_df$End.Station)
# Sort the counts in descending order
sorted_counts <- sort(end_station_counts, decreasing = TRUE)
# Get the top 10 most common end stations
top_10_end_stations <- head(sorted_counts, 10)
# Print the result
# print(top_10_end_stations)
# Extract the month from the 'Start.Time' column
merged_df$Start.Month <- month(merged_df$Start.Time)
# Create separate dataframes for each city
ny_data <- merged_df %>% filter(City == "NY")
wash_data <- merged_df %>% filter(City == "Washington")
chi_data <- merged_df %>% filter(City == "Chicago")
# Create plots for each city
ny_data <- ggplot(ny_data, aes(x = Start.Month)) +
geom_bar() +
labs(title = "New York - Rides per Month", x = "Month", y = "Count")
wash_data <- ggplot(wash_data, aes(x = Start.Month)) +
geom_bar() +
labs(title = "Washington - Rides per Month", x = "Month", y = "Count")
chi_data <- ggplot(chi_data, aes(x = Start.Month)) +
geom_bar() +
labs(title = "Chicago - Rides per Month", x = "Month", y = "Count")
# Print the plots
print(ny_data)
print(wash_data)
print(chi_data)
top_stations <- merged_df %>%
group_by(City, End.Station) %>%
summarize(Count = n()) %>%
arrange(City, desc(Count)) %>%
group_by(City) %>%
top_n(10, wt = Count)
# Create a bar plot with bars colored by City and a legend
ggplot(top_stations, aes(x = reorder(End.Station, -Count), y = Count, fill = City)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "End Station", y = "Count") +
ggtitle("Top 10 End Stations Across All Cities") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = c("NY" = "skyblue", "Washington" = "salmon", "Chicago" = "chartreuse")) +
guides(fill = guide_legend(title = "City"))
top_stations <- merged_df %>%
group_by(City, End.Station) %>%
summarize(Count = n()) %>%
arrange(City, desc(Count)) %>%
group_by(City) %>%
top_n(30, wt = Count)
# Create a bar plot with bars colored by City and a legend
ggplot(top_stations, aes(x = reorder(End.Station, -Count), y = Count, fill = City)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "End Station", y = "Count") +
ggtitle("Top 10 End Stations Across All Cities") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = c("NY" = "skyblue", "Washington" = "salmon", "Chicago" = "chartreuse")) +
guides(fill = guide_legend(title = "City"))
wash$Gender <- NA
wash$Birth.Year <-NA
formatDateTimeColumn <- function(df, col_name) {
# Check if the specified column exists in the dataframe
if (!col_name %in% colnames(df)) {
stop("Column not found in the dataframe.")
}
# Convert the specified column to POSIXct
df[[col_name]] <- as.POSIXct(df[[col_name]], format = "%Y-%m-%d %H:%M:%S")
# Format the column using strftime()
df[[col_name]] <- strftime(df[[col_name]], format = "%Y-%m-%d %H:%M:%S")
return(df)
}
merged_df <-rbind(ny,wash)
merged_df <- rbind(merged_df,chi)
head(merged_df)
# Extract the month from the 'Start.Time' column
merged_df$Start.Month <- month(merged_df$Start.Time)
# Calculate the mode (most common) month
mode_month <- as.integer(names(sort(table(merged_df$Start.Month), decreasing = TRUE)[1]))
# Convert the mode_month to a month name
mode_month_name <- month.name[mode_month]
# Print the result
cat("The most common month is:", mode_month_name, "\n")
ny <- formatDateTimeColumn(ny, "End.Time")
wash <- formatDateTimeColumn(wash, "End.Time")
chi <- formatDateTimeColumn(chi, "End.Time")
ny$City <- "NY"
wash$City <- "Washington"
chi$City <- "Chicago"
merged_df <-rbind(ny,wash)
merged_df <- rbind(merged_df,chi)
head(merged_df)
# Extract the month from the 'Start.Time' column
merged_df$Start.Month <- month(merged_df$Start.Time)
# Create separate dataframes for each city
ny_data <- merged_df %>% filter(City == "NY")
wash_data <- merged_df %>% filter(City == "Washington")
chi_data <- merged_df %>% filter(City == "Chicago")
# Create plots for each city
ny_data <- ggplot(ny_data, aes(x = Start.Month)) +
geom_bar() +
labs(title = "New York - Rides per Month", x = "Month", y = "Count")
wash_data <- ggplot(wash_data, aes(x = Start.Month)) +
geom_bar() +
labs(title = "Washington - Rides per Month", x = "Month", y = "Count")
chi_data <- ggplot(chi_data, aes(x = Start.Month)) +
geom_bar() +
labs(title = "Chicago - Rides per Month", x = "Month", y = "Count")
# Print the plots
print(ny_data)
print(wash_data)
print(chi_data)
# Use the table() function to count the occurrences of each end station
end_station_counts <- table(merged_df$End.Station)
# Sort the counts in descending order
sorted_counts <- sort(end_station_counts, decreasing = TRUE)
# Get the top 10 most common end stations
top_10_end_stations <- head(sorted_counts, 10)
# Print the result
# print(top_10_end_stations)
station_data <-as.data.frame(top_10_end_stations)
colnames(station_data) <- c("End_Station","Count")
# Show the results
ggplot(station_data, aes(x = reorder(End_Station, -Count), y = Count)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(x = "End Station", y = "Count") +
ggtitle("Top 10 End Stations") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
top_stations <- merged_df %>%
group_by(City, End.Station) %>%
summarize(Count = n()) %>%
arrange(City, desc(Count)) %>%
group_by(City) %>%
top_n(30, wt = Count)
# Create a bar plot with bars colored by City and a legend
ggplot(top_stations, aes(x = reorder(End.Station, -Count), y = Count, fill = City)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "End Station", y = "Count") +
ggtitle("Top 10 End Stations Across All Cities") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = c("NY" = "skyblue", "Washington" = "salmon", "Chicago" = "chartreuse")) +
guides(fill = guide_legend(title = "City"))
top_stations <- merged_df %>%
group_by(City, End.Station) %>%
summarize(Count = n()) %>%
arrange(City, desc(Count)) %>%
group_by(City) %>%
top_n(10, wt = Count)
# Create a bar plot with bars colored by City and a legend
ggplot(top_stations, aes(x = reorder(End.Station, -Count), y = Count, fill = City)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "End Station", y = "Count") +
ggtitle("Top 10 End Stations Across All Cities") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = c("NY" = "skyblue", "Washington" = "salmon", "Chicago" = "chartreuse")) +
guides(fill = guide_legend(title = "City"))
top_stations <- merged_df %>%
group_by(City, End.Station) %>%
summarize(Count = n()) %>%
arrange(City, desc(Count)) %>%
group_by(City) %>%
top_n(10, wt = Count)
# Create a bar plot with bars colored by City and a legend
ggplot(top_stations, aes(x = reorder(End.Station, -Count), y = Count, fill = City)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "End Station", y = "Count") +
ggtitle("Top 10 End Stations Across All Cities") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = c("NY" = "skyblue", "Washington" = "salmon", "Chicago" = "chartreuse")) +
guides(fill = guide_legend(title = "City"))
station_data <-as.data.frame(top_10_end_stations)
colnames(station_data) <- c("End_Station","Count")
# Show the results
ggplot(station_data, aes(x = reorder(End_Station, -Count), y = Count)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(x = "End Station", y = "Count") +
ggtitle("Top 10 End Stations") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
knitr::opts_chunk$set(jupytext_formats = "ipynb,Rmd")
install.packages("jupytext")
knitr::opts_chunk$set(jupytext_formats = "ipynb,Rmd")
install.packages("jupytext")
knitr::opts_chunk$set(jupytext_formats = "ipynb,Rmd")
install.packages("dplyr","summarytools","ggplot2")
library(dplyr, summarytools, ggplot2)
install.packages("dplyr", "summarytools", "ggplot2")
install.packages("dplyr", "summarytools", "ggplot2")
library(dplyr)
library(ggplot2)
library(summarytools)
install.packages("jupytext")
knitr::opts_chunk$set(jupytext_formats = "ipynb,Rmd")
install.packages("dplyr","summarytools","ggplot2")
library(dplyr, summarytools, ggplot2)
ny = read.csv("new-york-city.csv")
wash = read.csv("washington.csv")
chi = read.csv("chicago.csv")
colnames(ny)
colnames(wash)
colnames(chi)
str(ny)
str(wash)
str(chi)
install.packages("dplyr", "summarytools", "ggplot2")
formatDateTimeColumn <- function(df, col_name) {
# Check if the specified column exists in the dataframe
if (!col_name %in% colnames(df)) {
stop("Column not found in the dataframe.")
}
# Convert the specified column to POSIXct
df[[col_name]] <- as.POSIXct(df[[col_name]], format = "%Y-%m-%d %H:%M:%S")
# Format the column using strftime()
df[[col_name]] <- strftime(df[[col_name]], format = "%Y-%m-%d %H:%M:%S")
return(df)
}
ny$City <- "NY"
wash$City <- "Washington"
chi$City <- "Chicago"
ny$City <- "NY"
wash$City <- "Washington"
chi$City <- "Chicago"
install.packages("jupytext")
knitr::opts_chunk$set(jupytext_formats = "ipynb,Rmd")
install.packages("dplyr","summarytools","ggplot2")
library(dplyr, summarytools, ggplot2)
ny = read.csv("new-york-city.csv")
wash = read.csv("washington.csv")
chi = read.csv("chicago.csv")
install.packages("dplyr", "summarytools", "ggplot2")
colnames(ny)
colnames(wash)
colnames(chi)
str(ny)
str(wash)
str(chi)
install.packages(c("dplyr", "summarytools"))
install.packages(c("dplyr", "summarytools"))
install.packages(c("dplyr", "summarytools"))
install.packages(c("dplyr", "summarytools"))
library(dplyr)
library(summarytools)
install.packages("jupytext")
knitr::opts_chunk$set(jupytext_formats = "ipynb,Rmd")
install.packages("dplyr","summarytools","ggplot2")
library(dplyr, summarytools, ggplot2)
install.packages("dplyr", "summarytools", "ggplot2")
packages_path <- system.file("PACKAGES", package = "ggplot2")
cat("The path to the PACKAGES file for ggplot2 is:", packages_path, "\n")
library(ggplot2)
packages_path <- system.file("PACKAGES", package = "ggplot2")
cat("The path to the PACKAGES file for ggplot2 is:", packages_path, "\n")
install.packages("dplyr","summarytools","ggplot2")
install.packages("dplyr", "summarytools", "ggplot2")
library(summarytools)
st_options(use.x11 = FALSE)
dfSummary(your_data_frame)
colnames(ny)
install.packages("jupytext")
knitr::opts_chunk$set(jupytext_formats = "ipynb,Rmd")
install.packages("dplyr","summarytools","ggplot2")
library(dplyr, summarytools, ggplot2)
install.packages("dplyr", "summarytools", "ggplot2")
install.packages("jupytext")
knitr::opts_chunk$set(jupytext_formats = "ipynb,Rmd")
install.packages("dplyr","summarytools","ggplot2")
library(dplyr, summarytools, ggplot2)
install.packages("dplyr", "summarytools", "ggplot2")
